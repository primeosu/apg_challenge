/**
 * /controllers/malware.js
 *
 * @decription: Malware controller layer
 * @author: Chris Young (young.c.5690@gmail.com)
 * @created: September 17th 2015
 */

let _ = require('underscore'),
    async = require('async');

let Malware = require(`${__dirname}/../services/malware.js`);

/**
 * Malware.create()
 * @description: Validates request body and then persists new malwares to the database
 * @param: {Object} request
 * @param: {Object} response
 */
exports.create = (request, response) => {
  console.log(`* [${request.id}] Request to create malwares:`, request.body);

  if (!_.isArray(request.body)) {
    return response.status(400).send('Request body should be an Array');
  }

  let error = Malware.validate(request.id, request.body);
  if (error) {
    console.log(`* [${request.id}] responded with 400`);
    return response.status(400).send(error);
  }

  let results = [];
  async.eachSeries(request.body, (data, callback) => {
    Malware.create(request.id, data, (error, data) => {
      if (error) {
        return callback({ status: error, data: data });
      }

      results.push(data);
      return callback();
    });
  }, (error) => {
    if (error) {
      response.status(error.status).send(`Upload failed at malware ${error.data}`);
      return console.log(`* [${request.id}] Failed to create malwares at ${error.data}`);
    }

    response.status(200).send(results);
    console.log(`* [${request.id}] Successfully created malwares`);
  });
};

/**
 * Malware.readAll()
 * @description: Fetches all malware entries from the database
 * @param: {Object} request
 * @param: {Object} response
 */
exports.readAll = (request, response) => {
  console.log(`* [${request.id}] Request to fetch all malwares`);
  Malware.readAll(request.id, (error, data) => {
    if (error) {
      response.status(error).send(data);
      return console.log(`* [${request.id}] Failed to respond with malwares`);
    }

    response.status(200).send(data);
    console.log(`* [${request.id}] Successfully respond with malwares`);
  });
};

