class Malware < ActiveRecord::Base
  belongs_to :classification
  belongs_to :filetype

  validates :md5,
    presence: true,
    uniqueness: true,
    format: { with: /\A0x[\dA-Fa-f]{32}\z/, message: 'must be in MD5 hex string format'}
  validates :size,
    numericality: { only_integers: true, greater_than_or_equal_to: 0 }

  # a count of all malware by classification type
  scope :threat_count, -> { joins(:classification).group(:threat_type).count }

  # browsers are not good at guessing Content-Types
  CSV_MIME_TYPES = [
    'text/csv',
    'text/plain',
    'application/vnd.ms-excel',
    'application/octet-stream'
  ]

  # imports malware entries from a csv file. The records are created inside
  # of a transaction so that any errors in the import data will trigger a
  # a rollback and no changes will be comitted.
  #
  # returns a string with the original error and the offending csv row
  def self.import(upload_file)
    error_msg = nil
    if upload_file.nil?
      error_msg = 'Please select a file to upload'
    elsif !CSV_MIME_TYPES.include?(upload_file.content_type)
      error_msg = 'Please upload a CSV file'
    else
      Malware.transaction do
        CSV.foreach(upload_file.path, headers: true).each_with_index do |row, i|
          begin
            self.create_from_csv_row!(row)
          rescue StandardError => e
            error_msg = "#{e.message} on row #{i}: #{row}"
            raise ActiveRecord::Rollback
          end
        end
      end
    end
    error_msg
  end

  # creates the malware entry from a hash-like object in the same format
  # as a row of CSV data. 
  def self.create_from_csv_row!(row)
    filetype = Filetype.find_or_create_by!(
      extension: row['FileType']
    )
    classification = Classification.find_or_create_by!(
      behavior: row['ClassificationName'],
      threat_type: row['ClassificationType']
    )
    self.create!(
      md5: row['MD5'],
      size: row['Size'],
      filetype: filetype,
      classification: classification
    )
  end

  # massage threat type data for display
  # todo - should be refactored into a decorator class
  def self.threat_table
    threat_count.each_pair.map { |name, count|
      { classification_type: name, count: count }
    }.sort_by { |hsh| hsh[:count] }.reverse!
  end
end
