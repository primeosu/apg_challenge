<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use File;
use Carbon\Carbon;
use App\Malware;
use App\Http\Requests;
use App\Http\Controllers\Controller;

class MalwareController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // show all malware
        $malwares = Malware::paginate(25);
        return view('malware.index')->with('malwares', $malwares);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
      // Store into folder for backup and add onto the table
      $dir = "uploads/";
      $file = $dir . basename($_FILES["uploaded_file"]["name"]);

      // basic validation checking and upload success
      if (pathinfo($file, PATHINFO_EXTENSION) != "csv") {
        return view('errors.genericerror')->with("errmsg", "The file you tried to upload is not a CSV file");
      } else {
        if (move_uploaded_file($_FILES["uploaded_file"]["tmp_name"], $file)) {
          // echo "The file ". basename( $_FILES["uploaded_file"]["name"]). " has been uploaded.";
        } else {
          return view('errors.genericerror')->with("errmsg", "Sorry, we are looking into the issue!");
        }
      }

      $old = "uploads/" . $_FILES["uploaded_file"]["name"];
      $new = "uploads/" . Carbon::now() . ".csv";

      $contents = File::get($old);
      $contents = str_getcsv(str_replace("\n", ",", $contents)); //will add extra "," to end

      $this->createMalwareEntry($contents);

      // rename csv to timestamps
      rename($old, $new);

      $malwares = Malware::paginate(25);
      return redirect('/malware')->with('malwares', $malwares);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        // show specific malware
        $malware = Malware::find($id);
        return view('malware.view')->with('malware', $malware);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        // delete at id
    }

    public function rebuildFromBackup() {
        $malwares = Malware::all();
        foreach ($malwares as $malware) {
          $malware->delete();
        }

        $files = glob('uploads/*');
        foreach ($files as $file) {
          $contents = File::get($file);
          $contents = str_getcsv(str_replace("\n", ",", $contents)); //will add extra "," to end
          $this->createMalwareEntry($contents);
        }

        $malwares = Malware::all();
        return redirect('malware')->with('malwares', $malwares);
    }

    public function uploadsIndex() {
        return view('upload.index');
    }

    public function deleteAll(Request $request) {
      if($request->deletekey == 'IntelRox') { //just in case you accidentally post something?
        $malwares = Malware::all();
        foreach ($malwares as $malware) {
          $malware->delete();
        }
      } else {
        return view('errors.genericerror')->with('errmsg','You can\'t delete that way!');
      }

      return redirect('/malware');
    }

    public function deleteUploads(Request $request)
    {
        if($request->deletekey == 'IntelRox') { //just in case you accidentally post something?
          // delete all upload backups
          $files = glob('uploads/*');
          foreach($files as $file) {
            unlink($file);
          }
        } else {
          return view('errors.genericerror')->with('errmsg','You can\'t delete that way!');
        }

        return redirect('/upload');
    }

    private function createMalwareEntry($contents) {
      // floor() removes decimal place due to extra empty value after last comma
      $length = floor(count($contents) / 5);

      // start at 1 to ignore the headers 'MD5,' 'Classification,' etc.
      for($x = 1; $x < $length; $x++) {

        $malware = new Malware;

        $malware->MD5 = $contents[$x * 5];
        $malware->ClassificationName = $contents[$x * 5 + 1];
        $malware->ClassificationType = $contents[$x * 5 + 2];
        $malware->Size = $contents[$x * 5 + 3];
        $malware->FileType = $contents[$x * 5 + 4];

        $malware->save();
      }
    }
}
