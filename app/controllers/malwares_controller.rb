class MalwaresController < ApplicationController
  before_action :set_malware, only: [:show, :edit, :update, :destroy]

  # GET /malwares
  # GET /malwares.json
  def index
    @malwares = Malware.find_by_sql("SELECT ClassificationType, Count() AS count FROM malwares group by ClassificationType")
  end

  # GET /malwares/1
  # GET /malwares/1.json
  def show
  end

  # GET /malwares/new
  def new
    @malware = Malware.new
  end

  # GET /malwares/1/edit
  def edit
  end

  # POST /malwares
  # POST /malwares.json
  def create
    @malware = Malware.new(malware_params)

    respond_to do |format|
      if @malware.save
        format.html { redirect_to @malware, notice: 'Malware was successfully created.' }
        format.json { render :show, status: :created, location: @malware }
      else
        format.html { render :new }
        format.json { render json: @malware.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /malwares/1
  # PATCH/PUT /malwares/1.json
  def update
    respond_to do |format|
      if @malware.update(malware_params)
        format.html { redirect_to @malware, notice: 'Malware was successfully updated.' }
        format.json { render :show, status: :ok, location: @malware }
      else
        format.html { render :edit }
        format.json { render json: @malware.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /malwares/1
  # DELETE /malwares/1.json
  def destroy
    @malware.destroy
    respond_to do |format|
      format.html { redirect_to malwares_url, notice: 'Malware was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  def import
    Malware.import(params[:input])
    redirect_to malwares_path, notice: "Data imported succesfully."
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_malware
      @malware = Malware.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def malware_params
      params.require(:malware).permit(:md5, :classificationName, :classificationType, :size, :fileType)
    end
end
